!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()=
!===================================================================================================================================
! no simple way to return type class to a non-class variable, apparently.
! revisit but did not work the way I intended
! there was a similiar one for vector and matrix
subroutine get_scalar_class_from_lala(varname,anything,ierr)
character(len=*),intent(in)       :: varname
class(*),intent(out)              :: anything
doubleprecision,allocatable       :: double(:,:), doublei(:,:)
integer,intent(out)               :: ierr
integer                           :: sz
! character return values work better if allocatable so they have their own procedure

   sz=0
   if(allocated(double))deallocate(double)
   call get_double_from_lala(varname,double,type=0,ierr=ierr)
   if(ierr.ne.0)return

   select type(anything)
    type is (complex)
       call get_double_from_lala(varname,doublei,type=1,ierr=ierr)
       ! so far lala cannot have an array of zero size so assume array(1,1) exists
       anything=cmplx(double(1,1),doublei(1,1),kind=sp)
       sz=size(double)

    type is (complex(kind=dp))
       call get_double_from_lala(varname,doublei,type=1,ierr=ierr)
       anything=cmplx(double(1,1), doublei(1,1))
       sz=size(double)
    type is (integer(kind=int8));  anything=int(double(1,1),kind=int8)     ;sz=size(double)
    type is (integer(kind=int16)); anything=int(double(1,1),kind=int16)    ;sz=size(double)
    type is (integer(kind=int32)); anything=int(double(1,1),kind=int32)    ;sz=size(double)
    type is (integer(kind=int64)); anything=int(double(1,1),kind=int64)    ;sz=size(double)
    type is (real(kind=real32));   anything=real(double(1,1),kind=real32)  ;sz=size(double)
    type is (real(kind=real64));   anything=real(double(1,1),kind=real64)  ;sz=size(double)
    type is (real(kind=real128));  anything=real(double(1,1),kind=real128) ;sz=size(double)
    type is (logical);             anything=nint(double(1,1)).ne.0         ;sz=size(double)
    class default
      stop 'crud. get_scalar_class_from_lala(1) does not know about this type'
      ierr=-20
   end select
   if(sz.ne.1)write(*,*)'*get_scalar_class_from_lala* Warning: variable was larger than one value, element (1:1) returned'
end subroutine get_scalar_class_from_lala
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()=
!===================================================================================================================================
subroutine expand_variables(line)
!@(#) brute force variable substitution. maybe add something like wordexp(3c) with command expansion?
! this is just to try the concept. Either use wordexp or an equivalent to replicate "here document" processing.
! note no automatic continuation of the line if it extends past allowed length
! the way this is written it would do recursive substitution and does not know when there is just not a match
character(len=*)             :: line
character(len=:),allocatable :: temp,search,name
integer                      :: i
integer                      :: j
integer                      :: ibug
character(len=4096)          :: scratch

if(index(line,'${') /= 0 ) )then
   temp=trim(line)
   INFINITE: do i=1,len_trim(line)
      istart= index(temp,'${')
      if(istart /= 0)then
         iend=index(temp,'}')
         if(iend.eq.0)cycle
         name=temp(istart+2:iend-1)
      endif
   enddo INFINITE
   line=temp
endif

end subroutine expand_variables
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()=
!===================================================================================================================================
pure recursive function qsort(values) result(sorted)
! concise quicksort from @arjen and @beliavsky shows recursion,
! array sections, and vectorized comparisons.
!
intrinsic pack, size
real, intent(in) :: values(:)
real             :: sorted(size(values))
   if (size(values) > 1) then
      sorted = &
      & [qsort(pack(values(2:),values(2:)<values(1))), values(1), &
      & qsort(pack(values(2:),values(2:)>=values(1)))]
   else
      sorted = values
   endif
end function qsort
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()=
!===================================================================================================================================
